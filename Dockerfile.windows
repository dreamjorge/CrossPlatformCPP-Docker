# escape=`

# Use a base image compatible with Windows Server Core 2022
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2022

# Set the shell to cmd
SHELL ["cmd", "/S", "/C"]

# Environment variables for Visual Studio Build Tools installer
ARG CHANNEL_URL=https://aka.ms/vs/17/release/channel
ARG VS_BUILD_TOOLS_URL=https://aka.ms/vs/17/release/vs_buildtools.exe

# Download Visual Studio channel and installer
ADD %CHANNEL_URL% C:\TEMP\VisualStudio.chman
ADD %VS_BUILD_TOOLS_URL% C:\TEMP\vs_buildtools.exe

# Install Visual Studio Build Tools with the C++ tools for native desktop workload
RUN C:\TEMP\vs_buildtools.exe --quiet --wait --norestart --nocache `
    --channelUri C:\TEMP\VisualStudio.chman `
    --installChannelUri C:\TEMP\VisualStudio.chman `
    --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended `
    --installPath C:\BuildTools

# Clean up the TEMP directory
RUN rmdir /S /Q C:\TEMP

# Set working directory to /build
WORKDIR C:\build

# Copy the project files
COPY . ./

# Use Visual Studio Developer Command Prompt to build the project
RUN C:\BuildTools\Common7\Tools\VsDevCmd.bat && `
    cmake -S . -B build -G "Visual Studio 17 2022" -A x64 && `
    cmake --build build --config Release

# Default command to run the built executable
CMD ["C:\\build\\build\\Release\\CrossPlatformApp.exe"]
