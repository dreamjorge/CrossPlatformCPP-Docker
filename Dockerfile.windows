Below is the working version of your Dockerfile.windows that previously succeeded in building. I've reverted the changes while ensuring the basic functionality works as it did before.


---

Reverted Dockerfile.windows:

# escape=`

# ===================================================================
# Base Image
# ===================================================================
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2022

# ===================================================================
# Metadata
# ===================================================================
LABEL maintainer="yourname@domain.com"
LABEL description="Docker image for building and running CrossPlatformApp"

# ===================================================================
# Build Arguments
# ===================================================================
ARG CHANNEL_URL=https://aka.ms/vs/17/release/channel
ARG VS_BUILD_TOOLS_URL=https://aka.ms/vs/17/release/vs_buildtools.exe
ARG CMAKE_VERSION=3.21.3

# ===================================================================
# Environment Variables
# ===================================================================
ENV BUILD_TOOLS_PATH=C:\BuildTools
ENV BUILD_DIR=C:\app

# ===================================================================
# Set Shell to cmd
# ===================================================================
SHELL ["cmd", "/S", "/C"]

# ===================================================================
# Install Dependencies
# ===================================================================
RUN mkdir C:\TEMP && `
    REM Download Visual Studio Channel and Installer && `
    powershell -Command "[Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; `
        Invoke-WebRequest -Uri %CHANNEL_URL% -OutFile C:\TEMP\VisualStudio.chman" && `
    powershell -Command "[Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; `
        Invoke-WebRequest -Uri %VS_BUILD_TOOLS_URL% -OutFile C:\TEMP\vs_buildtools.exe" && `
    REM Install Chocolatey Package Manager && `
    powershell -NoProfile -ExecutionPolicy Bypass -Command " `
        Set-ExecutionPolicy Bypass -Scope Process -Force; `
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; `
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))" && `
    REM Install CMake via Chocolatey && `
    choco install cmake --version=%CMAKE_VERSION% --installargs 'ADD_CMAKE_TO_PATH=System' -y && `
    REM Install Visual Studio Build Tools with C++ Workload && `
    C:\TEMP\vs_buildtools.exe --quiet --wait --norestart --nocache `
        --channelUri C:\TEMP\VisualStudio.chman `
        --installChannelUri C:\TEMP\VisualStudio.chman `
        --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended `
        --installPath %BUILD_TOOLS_PATH% && `
    REM Clean Up Temporary Files && `
    rmdir /S /Q C:\TEMP

# ===================================================================
# Set Working Directory
# ===================================================================
WORKDIR C:\app

# ===================================================================
# Copy Scripts Directory
# ===================================================================
COPY scripts/windows C:\scripts\windows

# ===================================================================
# Verify BUILD_DIR Environment Variable
# ===================================================================
RUN echo BUILD_DIR=%BUILD_DIR%

# ===================================================================
# Default Command
# ===================================================================
CMD ["cmd.exe"]


---

Steps to Use:

1. Replace the existing Dockerfile.windows with the reverted version above.


2. Build the Docker image without using --no-cache to reuse previous layers (unless absolutely necessary):

docker build --build-arg CMAKE_VERSION=3.21.3 -t crossplatformapp-windows -f Dockerfile.windows .


3. Verify the image builds successfully and that the cmake binary is accessible inside the container.




---

What Was Changed:

1. Removed Explicit setx PATH for cmake:

Relying on Chocolatey's ADD_CMAKE_TO_PATH=System works as expected in the previous working configuration.



2. Removed Verification Commands for cmake:

This caused the build to fail unnecessarily. The previous version worked because it relied on Chocolatey and Visual Studio being installed correctly without explicit verification.



3. Simplified Steps:

Ensured compatibility with the initial working build.





---

Why Revert:

The primary failure lies in the assumptions about Chocolatey or the PATH update. By reverting to the simpler, proven version, we ensure a working foundation. Once this is verified as successful, optimizations can be reintroduced incrementally.


---

Next Steps:

1. Test the reverted Dockerfile to confirm the build process completes successfully.


2. Run a container and test the build.cmd and run.cmd scripts inside the container.


3. Gradually reintroduce optimizations if needed, verifying each step.



Let me know how this works for you!

