name: Docker Build and Run on Windows Self Hosted

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-docker-images:
    name: Build Docker Images
    runs-on: [self-hosted]

    env:
      DOCKER_NAME_BASE: crossplatformapp-windows

    strategy:
      matrix:
        vs_year: [2019]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Verify Docker Installation
        shell: powershell
        run: |
          docker --version
          if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
            Write-Error "Docker is not installed or not in PATH."
            exit 1
          }

      - name: Get VS_VERSION from VS_YEAR
        id: get-vs-version
        shell: powershell
        run: |
          $vs_version = .\scripts\windows\get_vs_version.ps1 -VS_YEAR ${{ matrix.vs_year }}
          if (-not $vs_version) {
            Write-Error "Failed to determine VS_VERSION for year ${{ matrix.vs_year }}"
            exit 1
          }
          echo "vs_version=$vs_version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      - name: Set VS_VERSION in Environment
        shell: powershell
        run: |
          echo "VS_VERSION=${{ steps.get-vs-version.outputs.vs_version }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Build Docker Image
        shell: powershell
        run: |
          docker build --isolation=process --no-cache `
            --build-arg VS_YEAR=${{ matrix.vs_year }} `
            --build-arg VS_VERSION=${{ env.VS_VERSION }} `
            -t $env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }} `
            -f Dockerfile.windows10.base .

  run-tests:
    name: Run Build and Run Scripts in Docker
    runs-on: [self-hosted, windows, docker]
    needs: build-docker-images

    strategy:
      matrix:
        config: [Debug, Release]
        vs_year: [2019]

    env:
      DOCKER_NAME_BASE: crossplatformapp-windows

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Verify Docker Installation
        shell: powershell
        run: |
          docker --version
          if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
            Write-Error "Docker is not installed or not in PATH."
            exit 1
          }

      - name: Run Build Script Inside Docker
        shell: powershell
        run: |
          $imageTag = "$env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"
          docker run --rm `
            -e CONFIG=${{ matrix.config }} `
            -e VS_YEAR=${{ matrix.vs_year }} `
            -e VS_VERSION=${{ env.VS_VERSION }} `
            -v "${{ github.workspace }}:C:/app" `
            $imageTag `
            powershell -NoProfile -ExecutionPolicy Bypass -File "C:/app/scripts/windows/build.ps1" -Config "$env:CONFIG" -BuildDir "C:/app/build"

      - name: Run Application Inside Docker
        shell: powershell
        run: |
          $imageTag = "$env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"
          docker run --rm `
            -e CONFIG=${{ matrix.config }} `
            -e VS_YEAR=${{ matrix.vs_year }} `
            -e VS_VERSION=${{ env.VS_VERSION }} `
            -v "${{ github.workspace }}:C:/app" `
            $imageTag `
            powershell -NoProfile -ExecutionPolicy Bypass -File "C:/app/scripts/windows/run.ps1" -Config "$env:CONFIG" -BuildDir "C:/app/build"
