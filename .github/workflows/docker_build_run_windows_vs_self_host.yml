name: Docker Build and Run on Windows Self Hosted

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-docker-images:
    name: Build Docker Images
    runs-on: self-hosted  # Ensure this matches your self-hosted runner labels

    env:
      DOCKER_NAME_BASE: crossplatformapp-windows

    strategy:
      matrix:
        vs_year: [2019]  # Add more years if needed, e.g., [2017, 2019, 2022]

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      # Step 2: Verify Docker Installation
      - name: Verify Docker Installation
        shell: powershell
        run: |
          docker --version
          if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
            Write-Error "Docker is not installed or not in PATH."
            exit 1
          }

      # Step 3: Get VS_VERSION from VS_YEAR
      - name: Get VS_VERSION from VS_YEAR
        id: get-vs-version
        shell: powershell
        run: |
          $vs_version = .\scripts\windows\get_vs_version.ps1 -VS_YEAR ${{ matrix.vs_year }}
          echo "vs_version=$vs_version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      # Step 4: Set the VS_VERSION as an environment variable
      - name: Set VS_VERSION in Environment
        shell: powershell
        run: |
          echo "VS_VERSION=${{ steps.get-vs-version.outputs.vs_version }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

          
      # Step 5: Build Docker Image
      - name: Build Docker Image
        shell: powershell
        run: |
          docker build --no-cache `
            --build-arg VS_YEAR=${{ matrix.vs_year }} `
            --build-arg VS_VERSION=${{ env.VS_VERSION }} `
            -t $env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }} `
            -f Dockerfile.windows10.base .
          Write-Host "INFO: Built Docker image: $env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"

      - name: Build Docker Image for Visual Studio 2019
        run: |
          docker build --no-cache --build-arg CMAKE_VERSION=3.21.3 -t crossplatformapp-windows-vs19 -f Dockerfile.windows.vs19 .
  
  


  run-tests:
    name: Run Build and Run Scripts in Docker
    runs-on: self-hosted  # Ensure this matches your self-hosted runner labels
    needs: build-docker-images  # This job depends on the build-docker-images job

    strategy:
      matrix:
        config: [Debug, Release]
        vs_year: [2019]  # Add more years if needed, e.g., [2017, 2019, 2022]

    env:
      DOCKER_NAME_BASE: crossplatformapp-windows

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Verify Docker Installation
      - name: Verify Docker Installation
        shell: powershell
        run: |
          docker --version
          if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
            Write-Error "Docker is not installed or not in PATH."
            exit 1
          }

      # Step 3: Get VS_VERSION from VS_YEAR
      - name: Get VS_VERSION from VS_YEAR
        id: get-vs-version
        shell: powershell
        run: |
          $vs_version = .\scripts\windows\get_vs_version.ps1 -VS_YEAR ${{ matrix.vs_year }}
          echo "vs_version=$vs_version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      # Step 4: Run the build script inside the Docker container
      - name: Run Build Script Inside Docker
        shell: powershell
        run: |
          $imageTag = "$env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"
          docker run --rm `
            -e CONFIG=${{ matrix.config }} `
            -e VS_YEAR=${{ matrix.vs_year }} `
            -e VS_VERSION=${{ steps.get-vs-version.outputs.vs_version }} `
            -v "${{ github.workspace }}:C:/app" `
            $imageTag `
            powershell -NoProfile -ExecutionPolicy Bypass -File "C:/app/scripts/windows/build.ps1" -Config "$env:CONFIG" -BuildDir "C:/app/build"

      # Step 5: Run the application inside the Docker container
      - name: Run Application Inside Docker
        shell: powershell
        run: |
          $imageTag = "$env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"
          docker run --rm `
            -e CONFIG=${{ matrix.config }} `
            -e VS_YEAR=${{ matrix.vs_year }} `
            -e VS_VERSION=${{ steps.get-vs-version.outputs.vs_version }} `
            -v "${{ github.workspace }}:C:/app" `
            $imageTag `
            powershell -NoProfile -ExecutionPolicy Bypass -File "C:/app/scripts/windows/run.ps1" -Config "$env:CONFIG" -BuildDir "C:/app/build"
