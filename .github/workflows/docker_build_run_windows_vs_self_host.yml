name: Docker Build and Run on Windows Self Hosted

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-docker-images:
    name: Build Docker Images
    runs-on: self-hosted  # Ensure this matches your self-hosted runner labels

    env:
      DOCKER_NAME_BASE: crossplatformapp-windows
      CHANNEL_URL: https://aka.ms/vs/16/release/channel
      VS_BUILD_TOOLS_URL: https://aka.ms/vs/16/release/vs_buildtools.exe
      CMAKE_VERSION: 3.21.3

    strategy:
      matrix:
        vs_year: [2019]  # Extend this array if you add more years

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      # Step 2: Verify Docker Installation
      - name: Verify Docker Installation
        shell: powershell
        run: |
          docker --version
          if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
            Write-Error "Docker is not installed or not in PATH."
            exit 1
          }

      # Step 3: List Repository Files (Optional but Recommended)
      - name: List Repository Files
        shell: powershell
        run: |
          Write-Host "Listing files in the repository:"
          Get-ChildItem -Recurse | Format-Table -AutoSize

      # Step 4: Build Docker Image using Dockerfile.ws10
      - name: Build Docker Image
        shell: powershell  # Use built-in PowerShell shell
        run: |
          $imageTag = "$env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"
          Write-Host "Building Docker image with tag: $imageTag"
          docker build --no-cache `
            --build-arg CHANNEL_URL=$env:CHANNEL_URL `
            --build-arg VS_BUILD_TOOLS_URL=$env:VS_BUILD_TOOLS_URL `
            --build-arg CMAKE_VERSION=$env:CMAKE_VERSION `
            -t $imageTag `
            -f ./Dockerfile.ws10 .
          Write-Host "INFO: Built Docker image: $imageTag"

  run-tests:
    name: Run Build and Run Scripts in Docker
    runs-on: self-hosted  # Ensure this matches your self-hosted runner labels
    needs: build-docker-images  # This job depends on the build-docker-images job

    strategy:
      matrix:
        config: [Debug, Release]
        vs_year: [2019]  # Extend this array if you add more years

    env:
      DOCKER_NAME_BASE: crossplatformapp-windows

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Verify Docker Installation
      - name: Verify Docker Installation
        shell: powershell
        run: |
          docker --version
          if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
            Write-Error "Docker is not installed or not in PATH."
            exit 1
          }

      # Step 3: Run the build script inside the Docker container
      - name: Run Build Script Inside Docker
        shell: powershell
        run: |
          $imageTag = "$env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"
          Write-Host "Running build script inside Docker image: $imageTag with configuration: ${{ matrix.config }}"
          docker run --rm `
            -e CONFIG=${{ matrix.config }} `
            -e VS_YEAR=${{ matrix.vs_year }} `
            -v "${{ github.workspace }}:C:/app" `
            $imageTag `
            powershell -NoProfile -ExecutionPolicy Bypass -File "C:/app/scripts/windows/build.ps1" -Config "$env:CONFIG" -BuildDir "C:/app/build"

      # Step 4: Run the application inside the Docker container
      - name: Run Application Inside Docker
        shell: powershell
        run: |
          $imageTag = "$env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"
          Write-Host "Running application inside Docker image: $imageTag with configuration: ${{ matrix.config }}"
          docker run --rm `
            -e CONFIG=${{ matrix.config }} `
            -e VS_YEAR=${{ matrix.vs_year }} `
            -v "${{ github.workspace }}:C:/app" `
            $imageTag `
            powershell -NoProfile -ExecutionPolicy Bypass -File "C:/app/scripts/windows/run.ps1" -Config "$env:CONFIG" -BuildDir "C:/app/build"
