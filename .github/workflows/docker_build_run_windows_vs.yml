name: Docker Build and Run on Windows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-run-windows-docker:
    name: Build and Run Docker (Windows)
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Debug, Release]
        vs_year: [2017]
    env:
      CMAKE_VERSION: 3.21.3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Get VS_VERSION from VS_YEAR
      - name: Get VS_VERSION from VS_YEAR
        id: get-vs-version
        shell: pwsh
        run: |
          # Run the PowerShell script and capture its output
          $vs_version = ./scripts/windows/get_vs_version.ps1 -VS_YEAR ${{ matrix.vs_year }}
          Write-Host "INFO: Retrieved VS_VERSION=$vs_version"
          
          # Set the output variable for this step
          echo "vs_version=$vs_version" >> $env:GITHUB_OUTPUT

      # Step 3: Set VS_VERSION Environment Variable
      - name: Set VS_VERSION in Environment
        shell: pwsh
        run: |
          # Set the VS_VERSION environment variable using the step output
          echo "VS_VERSION=${{ steps.get-vs-version.outputs.vs_version }}" >> $env:GITHUB_ENV

      # Step 4: Debug VS_VERSION
      - name: Debug VS_VERSION
        shell: pwsh
        run: |
          Write-Host "DEBUG: VS_VERSION is set to '$env:VS_VERSION'"

      # - name: Build Base Docker Image
      #   shell: bash
      #   run: docker build --no-cache -t base -f Dockerfile.windows.base .

      # - name: Build Visual Studio Docker Image
      #   shell: bash
      #   run: |
      #     docker build --no-cache \
      #       --build-arg VS_YEAR=${{ matrix.vs_year }} \
      #       --build-arg VS_VERSION=${{ env.VS_VERSION }} \
      #       --build-arg CMAKE_VERSION=${{ env.CMAKE_VERSION }} \
      #       -t crossplatformapp-windows-vs${{ matrix.vs_year }} \
      #       -f Dockerfile.windows.vs .

      # - name: Debug Environment Inside Docker
      #   run: |
      #     & docker run --rm -e CONFIG=${{ matrix.config }} -e VS_YEAR=${{ matrix.vs_year }} -e VS_VERSION=${{ env.VS_VERSION }} `
      #       -v "${{ github.workspace }}:C:\app" crossplatformapp-windows-vs${{ matrix.vs_year }} cmd.exe /c set

      # - name: Run Build Script Inside Docker
      #   shell: bash
      #   run: |
      #     docker run --rm \
      #       -e CONFIG=${{ matrix.config }} \
      #       -e VS_YEAR=${{ matrix.vs_year }} \
      #       -v "${{ github.workspace }}:C:/app" \
      #       crossplatformapp-windows-vs${{ matrix.vs_year }} \
      #       powershell -NoProfile -ExecutionPolicy Bypass -File C:/app/scripts/windows/build.ps1
          
      # - name: Run Application Inside Docker
      #   shell: bash
      #   run: |
      #     docker run --rm \
      #       -e CONFIG=${{ matrix.config }} \
      #       -e VS_YEAR=${{ matrix.vs_year }} \
      #       -v "${{ github.workspace }}:C:/app" \
      #       crossplatformapp-windows-vs${{ matrix.vs_year }} \
      #       powershell -NoProfile -ExecutionPolicy Bypass -File C:/app/scripts/windows/run.ps1
      