name: Docker Build and Run on Windows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-run-windows-docker:
    name: Build and Run Docker (Windows)
    runs-on: windows-latest

    strategy:
      matrix:
        config: [Debug, Release]
        vs_year: [2017, 2019, 2022]
    env:
      CMAKE_VERSION: 3.21.3
      DOCKER_NAME_BASE: crossplatformapp-windows

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Retrieve the Visual Studio version based on the year
      - name: Get VS_VERSION from VS_YEAR
        id: get-vs-version
        shell: pwsh
        run: |
          $vs_version = ./scripts/windows/get_vs_version.ps1 -VS_YEAR ${{ matrix.vs_year }}
          Write-Host "INFO: Retrieved VS_VERSION=$vs_version"
          echo "vs_version=$vs_version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      # Step 3: Set the VS_VERSION as an environment variable
      - name: Set VS_VERSION in Environment
        shell: pwsh
        run: |
          echo "VS_VERSION=${{ steps.get-vs-version.outputs.vs_version }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      # Step 4: Build the base Docker image
      - name: Build Base Docker Image
        shell: pwsh
        run: |
          docker build --no-cache -t $env:DOCKER_NAME_BASE-base -f Dockerfile.windows.base .

      # Step 5: Build the Visual Studio-specific Docker image
      - name: Build Visual Studio Docker Image
        shell: pwsh
        run: |
          $imageTag = "$env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"
          docker build --no-cache `
            --build-arg VS_YEAR=${{ matrix.vs_year }} `
            --build-arg VS_VERSION=${{ env.VS_VERSION }} `
            --build-arg CMAKE_VERSION=${{ env.CMAKE_VERSION }} `
            -t $imageTag `
            -f Dockerfile.windows.vs .

      # Step 6: Run Build Script Inside Docker
      - name: Run Build Script Inside Docker
        shell: pwsh
        run: |
          $imageTag = "$env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"
          $buildDir = "C:/app/build/${{ matrix.config }}"
          docker run --rm `
            -e CONFIG=${{ matrix.config }} `
            -e VS_YEAR=${{ matrix.vs_year }} `
            -e VS_VERSION=${{ env.VS_VERSION }} `
            -e BuildDir=$buildDir `
            -v "${{ github.workspace }}:C:/app" `
            $imageTag `
            powershell -NoProfile -ExecutionPolicy Bypass `
              -File C:/app/scripts/windows/build.ps1 `
              -Config ${{ matrix.config }} `
              -BuildDir $buildDir

      # Step 7: Run Application Inside Docker
      - name: Run Application Inside Docker
        shell: pwsh
        run: |
          $imageTag = "$env:DOCKER_NAME_BASE-vs${{ matrix.vs_year }}"
          $buildDir = "C:/app/build/${{ matrix.config }}"
          docker run