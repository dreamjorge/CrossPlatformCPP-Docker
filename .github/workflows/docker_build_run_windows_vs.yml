name: Docker Build and Run on Windows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CMAKE_VERSION: 3.21.3
  IMAGE_PREFIX: crossplatformapp-vs
  APP_WORKDIR: /app
  SCRIPTS_PATH: /scripts/windows
  BUILD_SCRIPT: build.cmd
  RUN_SCRIPT: run.cmd
  DOCKERFILE_PATH: Dockerfile.windows.vs

jobs:
  build-and-run-windows-docker:
    runs-on: windows-latest

    strategy:
      matrix:
        vs_version: [15, 16, 17]
        config: [Debug, Release]

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Convert Host Path
        shell: pwsh
        run: |
          $driveLetter = $env:GITHUB_WORKSPACE.Substring(0,1).ToLower()
          $pathRest = $env:GITHUB_WORKSPACE.Substring(2) -replace '\\', '/'
          $dockerHostPath = '/' + $driveLetter + $pathRest
          Write-Host "Converted host path: $dockerHostPath"
          "$dockerHostPath" | Out-File -FilePath host_path.txt -Encoding utf8

      - name: Build Docker Image
        env:
          IMAGE_TAG: ${{ env.IMAGE_PREFIX }}-${{ matrix.vs_version }}
        run: |
          docker build --no-cache `
            --build-arg VS_VERSION=${{ matrix.vs_version }} `
            --build-arg CMAKE_VERSION=$env:CMAKE_VERSION `
            -t $env:IMAGE_TAG `
            -f $env:DOCKERFILE_PATH .

      - name: Debug Mounted Volume
        env:
          IMAGE_TAG: ${{ env.IMAGE_PREFIX }}-${{ matrix.vs_version }}
        shell: pwsh
        run: |
          $hostPath = Get-Content host_path.txt
          docker run --rm `
            -v "${hostPath}:${env:APP_WORKDIR}" `
            $env:IMAGE_TAG `
            cmd.exe /c "dir $env:APP_WORKDIR"

      - name: Run Build Script Inside Docker
        env:
          IMAGE_TAG: ${{ env.IMAGE_PREFIX }}-${{ matrix.vs_version }}
        shell: pwsh
        run: |
          $hostPath = Get-Content host_path.txt
          docker run --rm `
            -e CONFIG=${{ matrix.config }} `
            -e APP_WORKDIR=$env:APP_WORKDIR `
            -e SCRIPTS_PATH=$env:SCRIPTS_PATH `
            -e BUILD_SCRIPT=$env:BUILD_SCRIPT `
            -v "${hostPath}:${env:APP_WORKDIR}" `
            $env:IMAGE_TAG `
            cmd.exe /c "%SCRIPTS_PATH%\%BUILD_SCRIPT% %CONFIG% %VS_VERSION%"

      - name: Display Build Logs (if failure)
        if: failure()
        shell: pwsh
        run: |
          $hostPath = Get-Content host_path.txt
          type "$hostPath\build.log"

      - name: Run Application Inside Docker
        env:
          IMAGE_TAG: ${{ env.IMAGE_PREFIX }}-${{ matrix.vs_version }}
        shell: pwsh
        run: |
          $hostPath = Get-Content host_path.txt
          docker run --rm `
            -e CONFIG=${{ matrix.config }} `
            -e APP_WORKDIR=$env:APP_WORKDIR `
            -e SCRIPTS_PATH=$env:SCRIPTS_PATH `
            -e RUN_SCRIPT=$env:RUN_SCRIPT `
            -v "${hostPath}:${env:APP_WORKDIR}" `
            $env:IMAGE_TAG `
            cmd.exe /c "%SCRIPTS_PATH%\%RUN_SCRIPT%"
