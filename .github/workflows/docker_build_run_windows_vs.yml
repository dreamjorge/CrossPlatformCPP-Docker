name: Docker Build and Run on Windows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CMAKE_VERSION: 3.21.3
  IMAGE_PREFIX: crossplatformapp-vs
  SCRIPTS_PATH: C:\scripts\windows
  BUILD_SCRIPT: build.ps1
  RUN_SCRIPT: run.ps1
  DOCKERFILE_PATH: Dockerfile.windows.vs

jobs:
  build-and-run-windows-docker:
    runs-on: windows-latest

    strategy:
      matrix:
        vs_version: [15, 16, 17]
        config: [Debug, Release]

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build Docker Image
        env:
          IMAGE_TAG: ${{ env.IMAGE_PREFIX }}-${{ matrix.vs_version }}
        run: |
          docker build --no-cache `
            --build-arg VS_VERSION=${{ matrix.vs_version }} `
            --build-arg CMAKE_VERSION=$env:CMAKE_VERSION `
            -t $env:IMAGE_TAG `
            -f $env:DOCKERFILE_PATH .

      - name: Debug Mounted Volume
        env:
          IMAGE_TAG: ${{ env.IMAGE_PREFIX }}-${{ matrix.vs_version }}
        shell: pwsh
        run: |
          $hostPath = $env:GITHUB_WORKSPACE -replace '\\', '/'
          $containerPath = 'C:\app'
          Write-Host "Host Path: $hostPath"
          Write-Host "Container Path: $containerPath"
          $mountSpec = "type=bind,source=$hostPath,target=$containerPath"
          Write-Host "Mount Spec: $mountSpec"
          docker run --rm --mount "$mountSpec" $env:IMAGE_TAG cmd.exe /c dir $containerPath

      - name: Run Build Script Inside Docker
        env:
          IMAGE_TAG: ${{ env.IMAGE_PREFIX }}-${{ matrix.vs_version }}
          SCRIPTS_PATH: ${{ env.SCRIPTS_PATH }}
          BUILD_SCRIPT: ${{ env.BUILD_SCRIPT }}
          CONFIG: ${{ matrix.config }}
          VS_VERSION: ${{ matrix.vs_version }}
        shell: pwsh
        run: |
          $hostPath = $env:GITHUB_WORKSPACE -replace '\\', '/'
          $containerPath = 'C:\app'
          $mountSpec = "type=bind,source=$hostPath,target=$containerPath"

          Write-Host "CONFIG: $env:CONFIG"
          Write-Host "VS_VERSION: $env:VS_VERSION"
          Write-Host "SCRIPTS_PATH: $env:SCRIPTS_PATH"
          Write-Host "BUILD_SCRIPT: $env:BUILD_SCRIPT"

          $scriptPath = "$env:SCRIPTS_PATH\$env:BUILD_SCRIPT"
          $command = "powershell.exe -ExecutionPolicy Bypass -File $scriptPath"

          Write-Host "Command to execute: $command"

          docker run --rm `
            -e CONFIG=$env:CONFIG `
            -e VS_VERSION=$env:VS_VERSION `
            --mount "$mountSpec" `
            $env:IMAGE_TAG `
            cmd.exe /S /C $command

      - name: Display Build Logs (if failure)
        if: failure()
        shell: pwsh
        run: |
          $hostPath = $env:GITHUB_WORKSPACE
          type "$hostPath\build.log"

      - name: Run Application Inside Docker
        env:
          IMAGE_TAG: ${{ env.IMAGE_PREFIX }}-${{ matrix.vs_version }}
          SCRIPTS_PATH: ${{ env.SCRIPTS_PATH }}
          RUN_SCRIPT: ${{ env.RUN_SCRIPT }}
          CONFIG: ${{ matrix.config }}
        shell: pwsh
        run: |
          $hostPath = $env:GITHUB_WORKSPACE -replace '\\', '/'
          $containerPath = 'C:\app'
          $mountSpec = "type=bind,source=$hostPath,target=$containerPath"

          Write-Host "CONFIG: $env:CONFIG"
          Write-Host "SCRIPTS_PATH: $env:SCRIPTS_PATH"
          Write-Host "RUN_SCRIPT: $env:RUN_SCRIPT"

          $scriptPath = "$env:SCRIPTS_PATH\$env:RUN_SCRIPT"
          $command = "powershell.exe -ExecutionPolicy Bypass -File $scriptPath"

          Write-Host "Command to execute: $command"

          docker run --rm `
            -e CONFIG=$env:CONFIG `
            --mount "$mountSpec" `
            $env:IMAGE_TAG `
            cmd.exe /S /C $command
