# ==============================================================
# GitHub Actions Workflow: Docker Build and Run on Windows
# ==============================================================

name: Docker Build and Run on Windows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Global environment variables for consistent configuration
  CMAKE_VERSION: 3.21.3
  DOCKERFILE_PATH: Dockerfile.windows.vs
  DOCKER_IMAGE_PREFIX: crossplatformapp
  MOUNT_PATH: C:\app
  BUILD_SCRIPT: C:\app\scripts\windows\build.cmd
  RUN_SCRIPT: C:\app\scripts\windows\run.cmd

jobs:
  build-and-run-windows-docker:
    name: Build and Run Docker (Windows)
    runs-on: windows-latest

    strategy:
      matrix:
        vs_version:
          - { version: "15", tag: "vs2017" }
          - { version: "16", tag: "vs2019" }
          - { version: "17", tag: "vs2022" }
        config: [Debug, Release]

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Define Docker Image Tag
      - name: Define Docker Image Tag
        id: set_tag
        run: |
          IMAGE_TAG="${{ env.DOCKER_IMAGE_PREFIX }}-${{ matrix.vs_version.tag }}-${{ github.run_number }}"
          echo "DOCKER_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        shell: bash

      # Step 3: Log Build Configuration
      - name: Log Build Configuration
        shell: pwsh
        run: |
          echo "Visual Studio Version: ${{ matrix.vs_version.version }} (${{ matrix.vs_version.tag }})"
          echo "Build Configuration: ${{ matrix.config }}"
          echo "CMake Version: ${{ env.CMAKE_VERSION }}"
          echo "Using Dockerfile: ${{ env.DOCKERFILE_PATH }}"
          echo "Docker Image Tag: ${{ env.DOCKER_IMAGE_TAG }}"
          echo "Build Script: ${{ env.BUILD_SCRIPT }}"
          echo "Run Script: ${{ env.RUN_SCRIPT }}"
          echo "Mount Path: ${{ env.MOUNT_PATH }}"

      # Step 4: Build the Docker Image
      - name: Build Docker Image
        shell: pwsh
        run: |
          docker build --no-cache `
            --build-arg VS_VERSION=${{ matrix.vs_version.version }} `
            --build-arg CMAKE_VERSION=${{ env.CMAKE_VERSION }} `
            -t ${{ env.DOCKER_IMAGE_TAG }} `
            -f ${{ env.DOCKERFILE_PATH }} .

      # Step 5: Debug Mounted Scripts
      - name: Debug Mounted Scripts
        shell: pwsh
        run: |
          docker run --rm `
            -v "${{ github.workspace }}:${{ env.MOUNT_PATH }}" `
            ${{ env.DOCKER_IMAGE_TAG }} `
            cmd.exe /c "dir C:\app\scripts\windows"

      # Step 6: Validate Scripts in Container
      - name: Validate Scripts Inside Docker
        shell: pwsh
        run: |
          docker run --rm `
            -v "${{ github.workspace }}:${{ env.MOUNT_PATH }}" `
            ${{ env.DOCKER_IMAGE_TAG }} `
            cmd.exe /c "if not exist C:\app\scripts\windows\build.cmd (echo File not found && exit 1)"

      # Step 7: Run Build Script Inside Docker
      - name: Run Build Script Inside Docker
        shell: pwsh
        run: |
          docker run --rm `
            -v "${{ github.workspace }}:${{ env.MOUNT_PATH }}" `
            ${{ env.DOCKER_IMAGE_TAG }} `
            cmd.exe /c "${{ env.BUILD_SCRIPT }} ${{ matrix.vs_version.version }} ${{ matrix.config }}"

      # Step 8: Debug Build Directory
      - name: Debug Build Directory
        shell: pwsh
        run: |
          docker run --rm `
            -v "${{ github.workspace }}:${{ env.MOUNT_PATH }}" `
            ${{ env.DOCKER_IMAGE_TAG }} `
            cmd.exe /c "dir C:\app\build\${{ matrix.config }}"

      # Step 9: Run Application Inside Docker
      - name: Run Application Inside Docker
        shell: pwsh
        run: |
          docker run --rm `
            -v "${{ github.workspace }}:${{ env.MOUNT_PATH }}" `
            ${{ env.DOCKER_IMAGE_TAG }} `
            cmd.exe /c "${{ env.RUN_SCRIPT }}"
